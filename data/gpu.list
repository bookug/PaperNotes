---
id=
title=
author=
journal=
year=
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=0
title=Benchmarking GPUs to tune dense linear algebra
author=Volkov Vasily
journal=
year=2008
tags=nvidia gpu, dense linear algebra
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=1
title=Optimization principles and application performance evaluation of a multithreaded GPU using CUDA
author=Shane Ryoo
journal=PPoPP
year=2008
tags=GPU computing, CUDA, Optimization principles, lessons, design, performance evaluation, languages, parallel computing
star=****
problem=
interest=
hardness=
idea=developers face the challenge of striking the right balance between each thread's resource usage and the number of simultaneously active threads. The resources to manage include the number of registers and the amount of on-chip memory used per thread, number of threads per multiprocessor, and global memory bandwidth. We also obtain increased performance by reordering accesses to off-chip memory to combine requests to the same or contiguous memory locations and apply classical optimizations to reduce the number of executed operations
future=
comment=
other=
---
id=2
title=Selective GPU caches to eliminate CPU-GPU HW cache coherence
author=Neha Agarwal
journal=IEEE International Symposium on High Performance Computer Architecture (HPCA)
year=2016
tags=CPU-GPU HW cache coherence, gpu caches, strategies for cache coherence
star=****
problem=Recent work suggests extending hardware cache coherence between CPUs and GPUs to help support programming models with tightly coordinated sharing between CPU and GPU threads.
interest=Cache coherence is ubiquitous in shared memory multiprocessors because it provides a simple, high performance memory abstraction to programmers. 
hardness=implementing hardware cache coherence is particularly challenging in systems with discrete CPUs and GPUs that may not be produced by a single vendor
idea=selective caching, wherein we disallow GPU caching of any memory that would require coherence updates to propagate between the CPU and GPU, thereby decoupling the GPU from vendor-specific CPU coherence protocols. We propose several architectural improvements to offset the performance penalty of selective caching: aggressive request coalescing, CPU-side coherent caching for GPU-uncacheable requests, and a CPU-GPU interconnect optimization to support variable-size transfers. Moreover, current GPU workloads access many read-only memory pages; we exploit this property to allow promiscuous GPU caching of these pages, relying on page-level protection, rather than hardware cache coherence, to ensure correctness.
future=
comment=
other=
---
id=3
title=3D GPU architecture using cache stacking: Performance, cost, power and thermal analysis
author=Ahmed Al Maashri
journal=IEEE International Conference on Computer Design
year=2009
tags=3D GPU architecture, cache stacking, 3D die stacking, performance evaluation
star=***
problem=Graphics Processing Units (GPUs) offer tremendous computational and processing power. The architecture requires high communication bandwidth and lower latency between computation units and caches
interest=3D die-stacking technology is a promising approach to meet such requirements
hardness=
idea=the impact of stacking caches using the 3D technology on GPU performance. We also investigate the benefits of using 3D stacked MRAM on GPUs. Our work includes cost, power, and thermal analysis of the proposed architectural designs
future=
comment=
other=
---
id=4
title=Cache coherence for GPU architectures
author=Inderpreet Singh
journal=IEEE 19th International Symposium on High Performance Computer Architecture (HPCA)
year=2013
tags=cache coherence, gpu Architecture
star=****
problem=Introducing conventional directory protocols adds unnecessary coherence traffic overhead to existing GPU applications. Moreover, these protocols increase the verification complexity of the GPU memory system
interest=While scalable coherence has been extensively studied in the context of general purpose chip multiprocessors (CMPs), GPU architectures present a new set of challenges
hardness=
idea=a time-based coherence framework for GPUs, called Temporal Coherence (TC), that exploits globally synchronized counters in single-chip systems to develop a streamlined GPU coherence protocol. Synchronized counters enable all coherence transitions, such as invalidation of cache blocks, to happen synchronously, eliminating all coherence traffic and protocol races. We present an implementation of TC, called TC-Weak, which eliminates LCC's trade-off between stalling stores and increasing L1 miss rates to improve performance and reduce interconnect traffic.
future=
comment=
other=
---
id=5
title=All-pairs shortest-paths for large graphs on the GPU
author=
journal=siggraph
year=2008
tags=apsp, gpu, shortest path
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=6
title=A new GPU-based approach to the shortest path problem
author=
journal=
year=2013
tags=sssp,gpu, shortets path
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=7
title=PHAST: Hardware-accelerated shortest path trees
author=
journal=
year=2013
tags=PHAST, shortets path, gpu
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=8
title=Dijkstra's shortest path algorithm serial and parallel execution performance analysis
author=
journal=
year=2012
tags=Dijkstra, sssp, gpu, parallel
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=9
title=Blocked all-pairs shortest paths algorithm for hybrid CPU-GPU system
author=
journal=
year=2011
tags=apsp, hybrid cpu-gpu system
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=10
title=An empirical comparison of k-shortest simple path algorithms on multicores (survey)
author=
journal=ICPP
year=2018
tags=multicores, gpu, k-shortest path, survey, experimental paper
star=**
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=11
title=Optimal Path Maps on the GPU
author=
journal=
year=2019
tags=optimal path map, gpu, shortest path, OpenGL
star=**
problem=We introduce a new method for computing optimal path maps on the GPU using OpenGL shaders.
interest=
hardness=
idea=Our method explores GPU rasterization as a way to propagate optimal costs on a polygonal 2D environment, producing optimal path maps which can efficiently be queried at run-time. Our method is implemented entirely with GPU shaders, does not require pre-computation, addresses optimal path maps with multiple points and line segments as sources, and introduces a new optimal path map concept not addressed before: maps with weights at vertices representing possible changes in traversal speed. The produced maps offer new capabilities not explored by previous navigation representations and at the same time address paths with global optimality, a characteristic which has been mostly neglected in animated virtual environments. The proposed path maps partition the input environment into the regions sharing a same parent point along the shortest path to the closest source, taking into account possible speed changes at vertices.
future=
comment= The proposed approach is particularly suitable for the animation of multiple agents moving toward the entrances or exits of a virtual environment, a situation which is efficiently represented with the proposed path maps.
other=
---
id=12
title=Fast bidirectional shortest path on GPU
author=
journal=IEICE Electronic Express
year=2016
tags=bidirectional shortest path problem, GPGPU, early termination, shortest path of a single pair, parallel, bidirectional search
star=**
problem=a new algorithm to solve bidirectional shortets path problems using parallel architectures provided by general purpose computing on graphics processing units
interest=the bidirectional shortest path problems has important applications in VLSI floor planning and other areas.
hardness=
idea=performs parallel searches from the source and sink using Dijkstra's classic approach modified with pruning and early termination.
future=
comment=substantial speedup over a parallel method that performs a single parallel search on the GPGPU from the source to all other nodes but with early termination when targeted node is found.
other=this algorithm only finds the shortest path of a singel pair (s,t)
---
id=13
title=Comprehensive evaluation of a new GPU-based approach to the shortest path problem
author=Hector Ortega-Arranz
journal= International Journal of Parallel Programming
year=2015
tags=GPGPU, shortest path, Dijkstra, kernel characterization, nvidia platform comparison, optimization techniques, SSSP, Boost library, survey, experimental paper
star=***
problem=GPU SSSP algorithm implementation
interest=The single-source shortest path (SSSP) problem arises in many different fields.
hardness=
idea=The use of a proper choice of threadblock size; and the modification of the GPU L1 cache memory state of NVIDIA devices. These optimizations lead to performance improvements of up to 23% with respect to the non-optimized versions. In addition, we have made a platform comparison of several NVIDIA boards in order to distinguish which one is better for each class of graphs, depending on their features.
future=Our future work includes the comparison with other non-GPU parallel implementations using OpenMP or MPI, in order to see what the threshold is where the use of a GPU is worthwhile in terms of efficiency and/or consumed energy.
comment=Our work significantly speeds up the computation of the SSSP, not only with respect to a CPU-based version, but also to other state-of-the-artGPUimplementations based on Dijkstra; we compare our results with an optimized sequential implementation of Dijkstra’s algorithm included in the reference Boost library, obtaining an improvement ratio of up to 19× for some graph families, using less memory space.
other=
---
id=14
title=Accelerating GPU betweenness centrality
author=
journal=
year=2018
tags=gpu, betweenness centrality
star=**
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=15
title=SEP-graph: finding shortest execution paths for graph processing under a hybrid framework on GPU
author=
journal=
year=2019
tags=SEP-graph, shortest execution path, graph processing, hybrid framework on gpu
star=**
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=16
title=All-Pairs Shortest Path algorithms for planar graph for GPU-accelerated clusters
author=
journal= J. Parallel Distrib. Comput.
year=2015
tags=All-Pairs shortest path, apsp, planar graph, GPU-accelerated clusters
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=17
title=Dynamic Shortest Paths using JavaScript on GPUs
author=
journal=
year=2015
tags=dynamic, shortest path, JavaScript, GPU
star=**
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=18
title=Improved shortest path maps with GPU shaders
author=
journal=arXiv
year=2018
tags=improved shortest path maps, GPU shaders, OpenGL
star=**
problem=We present in this paper several improvements for computing shortest path maps using OpenGL shaders. 
interest=
hardness=
idea=The approach explores GPU rasterization as a way to propagate optimal costs on a polygonal 2D environment, producing shortest path maps which can efficiently be queried at run-time. Our improved method relies on Compute Shaders for improved performance, does not require any CPU pre-computation, and handles shortest path maps both with source points and with line segment sources. The produced path maps partition the input environment into regions sharing a same parent point along the shortest path to the closest source point or segment source.
future=
comment=Our method produces paths with global optimality, a characteristic which has been mostly neglected in animated virtual environments. The proposed approach is particularly suitable for the animation of multiple agents moving toward the entrances or exits of a virtual environment, a situation which is efficiently represented with the proposed path maps.
other=
---
id=19
title=CPU-GPU heterogeneous implementations of depth-based foreground detection
author=
journal=
year=2018
tags=CPU-GPU heterogeneous, depth-based foreground detection
star=**
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=20
title=BFS-4K: An Efficient Implementation of BFS for Kepler GPU Architectures
author=Federico Busato
journal=TPDS
year=2015
tags=Parallel graph algorithms, CUDA, GPU, BFS, Kepler GPU, BFS-4K
star=****
problem=Breadth-first search (BFS) is one of the most common graph traversal algorithms and the building block for a wide range of graph applications.
interest=With the advent of graphics processing units (GPUs), several works have been proposed to accelerate graph algorithms and, in particular, BFS on such many-core architectures.
hardness=Nevertheless, BFS has proven to be an algorithm for which it is hard to obtain better performance from parallelization. Indeed, the proposed solutions take advantage of the massively parallelism of GPUs but they are often asymptotically less efficient than the fastest CPU implementations.
idea=This paper presents BFS-4K, a parallel implementation of BFS for GPUs that exploits the more advanced features of GPU-based platforms (i.e., NVIDIA Kepler) and that achieves an asymptotically optimal work complexity. The paper presents different strategies implemented in BFS-4K to deal with the potential workload imbalance and thread divergence caused by any actual graph non-homogeneity.
future=
comment=The paper presents the experimental results conducted on several graphs of different size and characteristics to understand how the proposed techniques are applied and combined to obtain the best performance from the parallel BFS visits. Finally, an analysis of the most representative BFS implementations for GPUs at the state of the art and their comparison with BFS-4K are reported to underline the efficiency of the proposed solution.
other=compared with Harish, Edge Parall, Static Virtual Warp, Luo, Garland
---
id=21
title=CUDA Solutions for the SSSP Problem
author=
journal=ICCS(CCF C Conference of network area)
year=2009
tags=dijkstra, cuda, sssp, GPU, shortest path
star=**
problem=
interest=
hardness=
idea=
future=
comment=Provide parallel Dijkstra algorithm
other=
---
id=22
title=A New GPU-based Approach to the Shortest Path Problem 
author=
journal=HPCS
year=2013
tags=Dijkstra, GPU, sssp, shortest path
star=**
problem=
interest=
hardness=
idea=
future=
comment=Parallel Implementation of Dijkstra algorithm; outperform work [id:21] by 17%
other=
---
id=23
title=Efficient parallel implementation of single source shortest path algorithm on GPU using CUDA
author=Singh
journal=IJAER
year=2016
tags=Bellman-Ford, GPU, CUDA, SSSP, shortest path
star=**
problem=
interest=
hardness=
idea=
future=
comment=This paper has proposed the consistence and more efficient parallel implementations of algorithm proposed by Harish et al. employing just a single CUDA kernel to maintain two modification conditions. 
other=
---
id=24
title=A Quantitative Study of Irregular Programs on GPUs 
author=Burtscher
journal=IISWC
year=2012
tags=Bellman-Ford, GPU, sssp
star=**
problem=
interest=
hardness=
idea=
future=
comment=Present an implementation of parallel Bellman-ford algorithm on GPU; defines two measures of irregularity called control-flow irregularity and memory-access irregularity, and investigates, using performance-counter measurements, how irregular GPU kernels differ from regular kernels with respect to these measures.
other=
---
id=25
title=Locality-Based Relaxation: An Efficient Method for GPU-Based Computation of Shortest Paths
author=
journal=TTCS
year=2017
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=The proposed algorithm is based on the idea of locality-based relaxation, where instead of updating just the distance of a single vertex v, we update the distances of v’s neighboring vertices up to k steps.  
other=
---
id=
title=
author=
journal=
year=
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=
title=
author=
journal=
year=
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=
title=
author=
journal=
year=
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=
title=
author=
journal=
year=
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
