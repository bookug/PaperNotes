---
id=0
title=
author=
journal=
year=
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=1
title=The life and times of a zookeeper 
author= Flavio P. Junqueira, Benjamin C. Reed  (Yahoo!)
journal= ACM Symposium on Principles of Distributed Computing (PODC, CCF B conference of Architecture)
year=2009
tags=zookeeper, single point of failure, server, real-time computing, Distributed computing, CAP theory, Paxos protocol
star=****
problem=
interest=
hardness=
idea=
future=
comment=
other=also published on 2009 ACM Symposium on Parallel Algorithms and Architectures 
---
id=2
title=ZooKeeper: wait-free coordination for internet-scale systems 
author= Patrick Hunt, Mahadev Konar, Flavio P. Junqueira, Benjamin Reed (Yahoo!)
journal=USENIX Annual Technical Conference  (ATC)
year=2010
tags=ZooKeeper, transactions per second, throughput, The Internet, State machine replication, single point of failure, server, real-time computing, Distributed computing, CAP theory, Paxos protocol, operating system, linearizability, cache, Distributed lock manager
star=****
problem=ZooKeeper, a service for coordinating processes of distributed applications
interest=Since ZooKeeper is part of critical infrastructure, ZooKeeper aims to provide a simple and high performance kernel for building more complex coordination primitives at the client. It incorporates elements from group messaging, shared registers, and distributed lock services in a replicated, centralized service. The interface exposed by Zoo-Keeper has the wait-free aspects of shared registers with an event-driven mechanism similar to cache invalidations of distributed file systems to provide a simple, yet powerful coordination service. 
hardness=
idea= The ZooKeeper interface enables a high-performance service implementation. In addition to the wait-free property, ZooKeeper provides a per client guarantee of FIFO execution of requests and linearizability for all requests that change the ZooKeeper state. These design decisions enable the implementation of a high performance processing pipeline with read requests being satisfied by local servers. 
future=
comment=We show for the target workloads, 2:1 to 100:1 read to write ratio, that ZooKeeper can handle tens to hundreds of thousands of transactions per second. This performance allows ZooKeeper to be used extensively by client applications
other=ZooKeeper is based on Paxos, but more.  Paxos 可能导致活锁，一种特殊的饥饿     https://blog.csdn.net/b0Q8cpra539haFS7/article/details/83422461
---
id=3
title=Theoretically Efficient Parallel Graph Algorithms Can Be Fast and Scalable
author= Laxman Dhulipala, Guy E. Blelloch, Julian Shun
journal=ACM Symposium on Parallelism in Algorithms and Architectures   (SPAA, CCF B Conference of Architecture area)
year=2018
tags=Theoretical analysis, parallel graph Algorithms, fast, Scalable, Terabyte, shared memory, scalability, parallel computing, multi-core processor, Hyperlink, distributed memory, computer science, auxiliary memory, external memory
star=***
problem=There has been significant recent interest in parallel graph processing due to the need to quickly analyze the large graphs available today. Many graph codes have been designed for distributed memory or external memory. 
interest=However, today even the largest publicly-available real-world graph (the Hyperlink Web graph with over 3.5 billion vertices and 128 billion edges) can fit in the memory of a single commodity multicore server. Nevertheless, most experimental work in the literature report results on much smaller graphs, and the ones for the Hyperlink graph use distributed or external memory.
hardness=it is natural to ask whether we can efficiently solve a broad class of graph problems on this graph in memory. 
idea=theoretically-efficient parallel graph algorithms can scale to the largest publicly-available graphs using a single machine with a terabyte of RAM, processing them in minutes. We give implementations of theoretically-efficient parallel algorithms for 13 important graph problems. We also present the optimizations and techniques that we used in our implementations, which were crucial in enabling us to process these large graphs quickly.
future=
comment=We show that the running times of our implementations outperform existing state-of-the-art implementations on the largest real-world graphs. For many of the problems that we consider, this is the first time they have been solved on graphs at this scale. We provide a publicly-available benchmark suite containing our implementations.
other=code is in    https://github.com/ldhulipala/gbbs
---
