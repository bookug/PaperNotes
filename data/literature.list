---
id=0
title=
author=
journal=
year=
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=1
title=Redesign of the gStore system
author=Li Zeng,Lei Zou
journal=Frontiers Comput. Sci.(FCS)
year=2018
tags=Database System,Graph Algorithm,Subgraph Matching,RDF Management,SPARQL Query
star=**
problem=optimize the graph database system - gStore
interest=to answer SPARQL queries as quickly as possible
hardness=the complexity of subgraph matching enumeration is NP-hard
idea=consider the shape of queries and new join algorithm based on filtering-and-verification framework
future=accelerate the system using new hardware like GPU, SSD, and FPGA
comment=it should be published in a better platform
other=FCS is not in the CCF list
---
id=2
title=Scalable Breadth-First Search on a GPU Cluster
author=Yuechao Pan,Roger Pearce,John D. Owens
journal=International Parallel & Distributed Processing Symposium(IPDPS)
year=2018
tags=Multiple GPU,Distributed Graph Processing,BFS
star=***
problem=the ratio of high computing power to communication bandwidth makes scaling BFS quite challenging on a GPU cluster
interest=BFS is a basic operator in graph algorithms and its speed is very important
hardness=the communication cost among multiple GPUs
idea=efficient graph representation(divide and store), finish local computation first, reduce communication by separating vertices by out-degrees
future=investigate applications beyond BFS, apply the ideas or explore new ides for optimization
comment=
other=IPDPS is a CCF B-class conference in the high performance computing area
---
id=3
title=Scalable GPU Graph Traversal
author=Duane Merrill,Michael Garland,Andrew Grimshaw
journal=Principles and Practice of Parallel Programming(PPoPP)
year=2012
tags=Breadth-first search(BFS),GPU,graph algorithms,parallel algorithms,prefix sum,graph traversal,sparse graph,load balance,work complexity,fine-grained,duplicates removal
star=*****
problem=reduce the work complexity of BFS on GPU
interest=BFS is a basic operator in graph algorithms and its speed is very important
hardness=the work complexity of original methods are too high,load imbalance,irregular memory access due to graph structure,duplicates due to concurrent discovery and previously-visited nodes
idea=based on frontier queue to reduce work complexity,expand via prefix sum,warp/block scheduling to solve load imbalance,remove duplicates(not all) based on warp or history
future=use the ideas in other graph algorithms,good strategies to solve the load imbalance,develop new optimizations for BFS
comment=perfect work,wonderful papers and everyone working on GPU graph algorithms should read it; any imbalance between CTAs can be limited by oversubscribing GPU cores with an abundance of CTAs and/or implementing coarse-grained tile-stealing mechanisms for CTAs to dequeue tiles at their own rate
other=this paper is hard to understand and there is another more detailed technical report,some blogs on Internet talks about its ideas in more comprehensive way and my PPT is also a good material for BFS; a detailed paper is provided in [id:14]
---
id=4
title=ThunderSVM: A Fast SVM Library on GPUs and CPUs
author=Zeyi Wen,Jiashuai Shi,Qinbin Li,Bingsheng He,Jian Chen
journal=Journal of Machine Learning Research 19
year=2018
tags=SVMs,GPUs,multi-core GPUs,efficiency,multiple interfaces
star=***
problem=SVM is too slow on a single CPU
interest=apply SVMto GPus and multi-core CPUs
hardness=change SVM algorithms from single thread to multiple threads
idea=
future=
comment=SVM is not so popular nowadays(neural network is the King)
other=This is a system tool not only a paper,placed on GitHub,support multiple programming languages,much faster
---
id=5
title=Relational Query Coprocessing on Graphics Processors
author=Bingsheng He,Mian Lu,Ke Yang,Rui Fang,Naga K. Govindaraju,Qiong Luo,Pedro V. Sander
journal=ACM Transactions on Database Systems(TODS)
year=2009
tags=Relational database,join,sort,primitive,parallel processing,graphics processors(GPU)
star=****
problem=how to answer relational queries as quickly as possible
interest=how to leverage the power of GPU to optimize relational queries
hardness=combine CPU and GPU considering their characteristics
idea=consider the architecture features of GPU,combine the power of GPU and CPU
future=
comment=
other=CCF A Journal in Database area
---
id=6
title=Relational Joins on Graphics Processors
author=Bingsheng He,Ke Yang,Rui Fang,Mian Lu,Naga K. Govindaraju,Qiong Luo,Pedro V. Sander
journal=ACM Conference on Management of Data(SIGMOD)
year=2008
tags=relational database,join,sort,primitive,parallel processing,graphics processors(GPU),lock-free scheme for result output(three phase),data-parallel primitive,nested-loop,sort-merge,hash join
star=****
problem=how relational joins can utilize hardware features of the GPU
interest=relational join is the most time-consuming part in query processing
hardness=the relational join algorithms must be optimized to adapt to the features of new-generation GPU
idea=contsructing primitives providing high-level abstractions for data-centric operations and are highly tuned to fully utilize the architectural features of graphics processors, combine quick sort(lower work complexity, when the whole amount of work is larger than cores) and bitonic sort(lower step complexity, only when placed in shared memory)
future=evaluate the join algorithms in this paper with more complex workloads,to schedule the execution of relational query processing between CPU and GPU so that their computation power is fully exploited
comment=the first job to apply relational join algorithms(non-indexed nested loop join, indexed nested loop join, sort-merge join, hash join) on GPGPU, and in experiments only quad-CPUs are compared; in split primitive each thread maintains a local histogram, which limits the number of partitions(larger number requires multiple passes of split); better to quantitatively study the performance impact of each individual hardware feature
other=the first to do something will always be remembered, even he does not so well; far behind the CPU vendors' tradition of giving sufficient details about the hardware specification
---
id=7
title=Direction-Optimizing Breadth-First Search
author=Scott Beamer,Krste,David Patterson
journal=International Conference for High Performance Computing, Networking, Storage, and Analysis(SC)
year=2012
tags=Breadth-First Search(BFS),low-diameter,scale-free,bottom-up,Direction Optimizing,multicore,GPU,Graph Algorithm, reverse search
star=****
problem=how to speed up BFS on multicore CPU or GPU
interest=BFS is a basic operator in graph algorithms and its speed is very important
hardness=many duplicates checking when using top-down strategy
idea=transform from top-down startegy to bottom-up strategy in a appropriate point
future=use the bottom-up strategy in other BFS-like graph algorithms
comment=this strategy is general and can be used in sequential, multi-core and mnay-core GPU and FPGA..., but on different devices the moment pf switching direction may be different;  The bottom-up strategy is really a fancy idea and works efficiently,high-diameter graphs will not benefit from the bottom-up approach but they are much easier to partition and thus easier to parallelize than low-diameter graphs
other=observe the features of some algorithms on a mainstream data(i.e. powerlow) and propose some optimizations corresponding to it;    also published in Scientific Programming 2013
---
id=8
title=Enterprise: Breadth-First Graph Traversal on GPUs
author=Hang Liu,H. Howie Huang
journal=International Conference for High Performance Computing, Networking, Storage, and Analysis(SC)
year=2015
tags=Breadth-First Search(BFS),Graphics Processing Unit(GPU),streamlined GPU threads scheduling,GPU workload balancing,GPU based BFS direction optimization,effective utilization of GPU memory hierarchy,Graph Algorithm, reverse search
star=****
problem=to speed up BFS on GPU
interest=applying BFS-like algorithms to GPU is very promising
hardness=the irregularity of graphs and high difficulty  of cuda programming on GPU
idea=streamlined GPU threads scheduling,GPU workload balancing,GPU based BFS direction optimization,effective utilization of GPU memory hierarchy
future= integrate Enterprise with high-speed storage and networking devices and run on even larger graphs
comment=meaningful work where we can borrow some ideas for designing graph algorithms on GPU
other=this paper can produce 70 billion TEPS on a single GPU and 446 million TEPS per Watt,delivering both high performance and energy-efficiency
---
id=9
title=iBFS: Concurrent Breadth-First Search on GPUs
author=Hang Liu,H. Howie Huang,Yang Hu
journal=ACM Conference on Management of Data(SIGMOD)
year=2016
tags=concurrent BFS,GPU,Graph Algorithm,shared frontier queue,outdegree-based GroupBy rules,high optimized bitwise operations
star=****
problem=how to optimize multiple BFS instances on GPUs
interest=useful in Graph 500 competition,shared opportunity in multiple BFS instances
hardness=how to design the sharing data structure,how to adjust the design according to the features of GPU
idea=leverages a novel GroupBy strategy, combined with joint frontier queue and bitwise operations
future=explore additional optimizations for iBFS and study its application on a wide range of domains
comment=useful work and non-trivial design,the depth information is lost if using the bitwise optimization
other=57267 TEPS(billion traversed edges per second) on 112 GPUs
---
id=10
title=Mars: A MapReduce Framework on Graphics Processors
author=Bingsheng He,Wenbin Fang,Qiong Luo,Naga K. Govindaraju,Tuyong Wang
journal=Parallel Architectures and Compilation Techniques(PACT, CCF B conference in architecture area)
year=2008
tags=MapReduce,GPGPU,Multi-core processors,Web Analysis,Data parallelism,two-step output scheme
star=****
problem=
interest=
hardness=
idea=
future=
comment=the two-step output scheme is very useful and it originates from [id:6] paper
other=
---
id=11
title=Fast Parallel Subgraph Matching on the GPU (GunrockSM)
author=Leyuan Wang,Yangzihao Wang,John D. Owens
journal=High-Performance Distributed Computing(HPDC poster, CCF B conference in High Performance Computing area)
year=2016
tags=GPU,RDF,SPARQL,Subgraph Matching,Gunrock,filtering-and-joining, GunrockSM
star=*
problem=how to implement subgraph matching on GPU based on the Gunrock framework
interest=Gunrock provides 4 useful and efficient operators, so we can implement in a simple way
hardness=how to use this operators and how to improve the performance
idea=collect candidates for vertices and edges respectively, then enumerate all combinations of the candidates of all query edges
future=joining order selection and reducing intermediate results
comment=the filtering strategy is too simple,the process of collect edge candidates may be very slow due to higher work complexity causing by long neighbor lists,the number of enumeration is too large for GPU to run,the locking strategy for result ouput can be very slow if many final results exist
other=this work can not deliver better performance than [id:12] paper, though it claims to
---
id=12
title=Fast Subgraph Matching on Large Graphs using Graphics Processors (GpSM)
author=Ha-Nguyen Tran,Jung-jae Kim,Bingsheng He
journal=International Conference on Database Systems(DASFAA, CCF B conference in Database area)
year=2015
tags=GPU-friendly,filtering-and-verification,Subgraph Matching,subgraph isomorphism, GpSM
star=****
problem=how to implement a GPU-frinedly subgraph matching algorithm
interest=subgraph matching problem is complex and hard and frequently encounted in real life,leverage the parallelism power of GPU in graph algorithms
hardness=traditional subgraph matching algorithms are based on backtracking strategies, so hard to be run in parallel;too complicate and too many cases
idea=use filtering-and-verification framework,two-step output scheme from [id:10],efficient GPU techniques of coalescence, warp-based and shared memory utilization, and a recursive refinement function for pruning irrelevant candidate vertices
future=improve the efficiency of GpSM for large graphs, for example, by dealing with large amount of intermediate results that do not fit into the GPU memory and also by adopting buffering techniques
comment=its strategy for very large graphs is too simple and may not work,only utilize a few of the shared memory,target at undirected graphs without edge labels;using a warp for a row, threads may be wasted if the work of a row divide by 32 and only get a small remaining,the load imbalance still exists if the work of a row is too large and should be dealed by a block(or many blocks) first; generates a large amount of irrelevant candidate vertices and edges, thus the size of intermediate table is very large
other=the definition used here is based on embedding subgraphs rather than induced subgraphs;the paper extends GpSM for very large graphs by retrieving only relevant vertices and their adjacency lists to the GPU memory; uses pruning recursively degree-based pruning technique in [id:346] of bookug.list
---
id=13
title=Towards Maximum Independent Sets on Massive Graphs
author=Yu Liu,Jiaheng Lu,Hua Yang,Xiaokui Xiao,Zhewei,Wei
journal=International Conference on Very Large Data Bases(VLDB)
year=2015
tags=Maximum Independent Set,NP-hard,semi-external,vertex-swap
star=****
problem=
interest=
hardness=
idea=
future=extended to the incremental massive graphs with frequent updates,study other graph problems like minimum vertex covers and graph coloring for massive graphs with a single commodity PC
comment=为了验证算法的精度，需要用比较快的方法得到一个图的独立数的上界，请问如何证明附录中相应算法的正确性，以及衡量该算法得到的上界和独立数相比的误差？关于论文中贪婪算法预处理的复杂度，只是需要按度数排序而已，不可以对邻接表另外建个索引，用他们的坐标（而非整个链表）参与排序，又因为所有顶点在内存中是可以放下的，这样不是可以保证开销很低？如果能有较快的方法得到独立数非常紧的界，甚至得到精确的独立数的值，MIS的复杂度可能得到实质性的改善么？
other=
---
id=14
title=High-Performance and Scalable GPU Graph Traversal
author=Duane Merrill
journal=ACM Transactions on Parallel Computing(TOPC, not in the CCF list)
year=2015
tags=Design, Algorithms, Performance, Breadth-first search, GPU, graph algorithms, parallel algorithms, prefix sum, graph traversal, sparse graphs
star=*****
problem=
interest=
hardness=
idea=
future=
comment=
other=a concrete version of [id:3]
---
id=15
title=Trace fragment selection within method-based JVMs
author=Duane Merrill
journal=Virtual Execution Environments(VEE, CCF B conference of architecture area)
year=2008
tags=
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=16
title=Profiles for conveying the secure communication requirements of Web services
author=Duane Merrill
journal=Concurrency and Computation: Practice and Experience
year=2009
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=17
title=Revisiting sorting for GPGPU stream architectures
author=Duane Merrill
journal=Parallel Architectures and Compilation Techniques(PACT, CCF B conference)
year=2010
tags=
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=18
title=High Performance and Scalable Radix Sorting: a Case Study of Implementing Dynamic Parallelism for GPU Computing
author=Duane Merrill
journal=Parallel Processing Letters
year=2011
tags=
star=
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=19
title=Optimizing Sparse Matrix Operations on GPUs Using Merge Path
author=Steven Dalton, Sean Baxter, Duane Merrill
journal=IPDPS
year=2015
tags=
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=20
title=Parallel Methods for Verifying the Consistency of Weakly-Ordered Architectures
author=Adam mcLaughlin, Duane Merrill
journal=PACT
year=2015
tags=
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=21
title=Merge-based parallel sparse matrix-vector multiplication
author=Duane Merrill
journal=SC
year=2016
tags=
star=****
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=22
title=Merge-based sparse matrix-vector multiplication (SpMV) using the CSR storage format
author=Duane Merrill
journal=PPoPP
year=2016
tags=
star=****
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=23
title=Direction-Optimizing Breadth-First Search on CPU-GPU Heterogeneous Platforms
author=Dan Zou
journal=HPCC/EUC   (CCF C conference of architecture area)
year=2013
tags=Direction Optimizing, reverse search, BFS, CPU-GPU, Heterogeneous platform
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=works on sequential process as well as in parallel
---
id=24
title=Spectral characteristics of network redundancy
author=B. D. MacArthur
journal=Physical Review E
year=2009
tags=Spectral analysis, spectral characteristics, network redundancy, spectrum theory
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=25
title=The GAP Benchmark Suite (part of GAP project)
author=Scott Beamer
journal=arXiv 
year=2015
tags=benchamrk suite, GAP, graph processing
star=***
problem=We present a graph processing benchmark suite with the goal of helping to standardize graph processing evaluations.
interest= Fewer differences between graph processing evaluations will make it easier to compare different research efforts and quantify improvements. The benchmark not only specifies graph kernels, input graphs, and evaluation methodologies, but it also provides optimized baseline implementations. These baseline implementations are representative of state-of-the-art performance, and thus new contributions should outperform them to demonstrate an improvement. 
hardness=
idea=The input graphs are sized appropriately for shared memory platforms, but any implementation on any platform that conforms to the benchmark's specifications could be compared. This benchmark suite can be used in a variety of settings. Graph framework developers can demonstrate the generality of their programming model by implementing all of the benchmark's kernels and delivering competitive performance on all of the benchmark's graphs. Algorithm designers can use the input graphs and the baseline implementations to demonstrate their contribution. Platform designers and performance analysts can use the suite as a workload representative of graph processing. 
future=
comment=some baselines are added for Researchers' convenience: Breadth-First Search (BFS) - direction optimizing, Single-Source Shortest Paths (SSSP) - delta stepping, PageRank (PR) - iterative method in pull direction,  Connected Components (CC) - Afforest & Shiloach-Vishkin, Betweenness Centrality (BC) - Brandes, Triangle Counting (TC) - Order invariant with possible relabelling
other=the website of GAP project  http://gap.cs.berkeley.edu/     https://github.com/sbeamer/gapbs     http://gap.cs.berkeley.edu/benchmark.html    ;   the homepage of Scott Beamer     http://scottbeamer.net/
---
id=26
title=Understanding and Improving Graph Algorithm Performance
author=Scott Beamer
journal=phd dissertation, University of California Berkeley
year=2016
tags=Graph Algorithm, hpc, phd dissertation, communication-intensive, Direction-Optimizing Breadth-First Search, GAP Benchmark Suite, Graph Workload Characterization, GAIL: Graph Algorithm Iron Law, Propagation Blocking, shared memory multiprocessors, graph topology, topological properties of graphs, meshes, social networks, sparse graph, graph sparsity
star=****
problem=
interest=Graph processing is experiencing a surge of renewed interest as applications in social networks and their analysis have grown in importance.  Additionally, graph algorithms have found new applications in speech recognition and the sciences.
hardness=In order to deliver the full potential of these emerging applications, graph processing must become substantially more ecient, as graph processing's communication-intensive nature often results in low arithmetic intensity that underutilizes available hardware platforms.
idea=
future=
comment=a graph's topology greatly impacts the workload's characteristics.  We primarily focus on social network topologies, as they are more challenging than meshes and they are at the epicenter of the renewed interest in graph processing.
other=summary of the author's contributions during his phd study;   Meshes tend to be derived from physically spatial sources, such as road maps or the nite-element mesh of a simulated car body, so they can be relatively readily partitioned along the few original spatial dimensions. Due to their physical origin, they usually have a high diameter and a degree distribution that is both bounded and low.    ;     Unfortunately, they do not capture the challenges posed by the small-world and scale-free properties of social network topologies. The small-world property makes them dicult to partition (few cut edges relative to enclosed edges), while the scale freeproperty makes it dicult to load balance a parallel execution since there can be many orders of magnitude dierence between the work for dierent vertices
---
id=27
title=Reducing Pagerank Communication via Propagation Blocking
author=Scott Beamer
journal=IPDPS
year=2017
tags=PageRank Communication, Propagation Blocking, spatial locality of data, blocking graph Computation
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=28
title=Distributed-Memory Breadth-First Search on Massive Graphs
author=Aydın Buluç, Scott Beamer
journal=Parallel Graph Algorithms
year=2018
tags=
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=29
title=GAIL: The Graph Algorithm Iron Law
author=Scott Beamer
journal=SC workshop
year=2015
tags=GAIL, graph Algorithm Iron Law, rules of Algorithm design, simple performance model
star=***
problem=
interest=
hardness=
idea=reasoning about tradeos across layers by considering algorithmic eciency, cache locality, and memory bandwidth utilization
future=
comment=
other=
---
id=30
title=Distributed Memory Breadth-First Search Revisited: Enabling Bottom-Up Search
author=Scott Beamer
journal=IPDPS workshop
year=2013
tags=distributed memory, BFS, Bottom-Up search, reversed BFS
star=**
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=31
title=Locality Exists in Graph Processing: Workload Characterization on an Ivy Bridge Server
author=Scott Beamer
journal=IISWC
year=2015
tags=Locality, graph Processing, Workload Characterization, Ivy Bridge Server, Intel processor
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other= Ivy Bridge是继Sandy Bridge（year 2013 主流）之后的新一代CPU产品。架构基本与Sandy Bridge一样，但是工艺从32nm提高到22nm。
---
id=32
title=An overview of Microsoft academic service (MAS) and applications
author=Arnab Sinha
journal=World Wide Web Consortium (W3C)
year=2015
tags=dataset, benchmark, Microsoft academic service(MAS), Microsoft Academic Graph
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=33
title= Realistic, mathematically tractable graph generation and evolution, using Kronecker multiplication
author=Jurij Leskovec
journal=European Conference on Principles and Practice of Knowledge Discovery in Databases
year=2005
tags=dataset ,benchmark, Kronecker generator, graph generation and evolution
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=34
title=Graph 500 benchamrk
author=
journal=
year=2010-now
tags=dataset, benchmark, Graph 500 competition
star=****
problem=
interest=
hardness=
idea=
future=
comment=
other=www.graph500.org
---
id=35
title= GraphX: Graph processing in a distributed dataflow framework
author=Joseph E Gonzalez
journal=Symposium on Operating Systems Design and Implementation (OSDI)
year=2014
tags=GraphX, graph processing, distributed dataflow
star=****
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=36
title= Parallelism in random access memories
author= S. Fortune
journal=The theory of Computing, ACM
year=1978
tags=Parallelism, random access memory(RAM), parallel random access machine(PRAM model), shared memory, arbitrary CRCW (concurrent read concurrent write) PRAM
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=https://baike.baidu.com/item/PRAM%E6%A8%A1%E5%9E%8B/1012201?fr=aladdin
---
id=37
title= Economical algorithms for finding shortest paths in a network
author=E. A. Dinitz 
journal=Transportation Modeling Systems
year=1978
tags=SSSP, shortest path, network, Dinitz's improvement
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=38
title=Introduction to Algorithms, Third Edition
author=T. H. Cormen
journal=The MIT Press
year=2001
tags=Introduction to Algorithms, book, proof
star=****
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=39
title=Dynamic Programming
author=Richard Bellman
journal=Princeton University Press
year=1957
tags=Dynamic Programming, book, Algorithm
star=****
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
id=40
title=On a routing problem  (Bellman-Ford algorithm)
author=Richard Bellman
journal=Quarterly of Applied Mathematics
year=1958
tags=Bellman-Ford algorithm, routing problem, shortest path, SSSP, dynamic programming, negative edge weights, (only reachable) negative cycles, fit for parallelism, fit for high-degree graphs
star=****
problem=
interest=
hardness=
idea=
future=
comment=O(ve) work complexity, fit for parallelism, good for high-degree graphs
other=In the worst case, this operation repeats v − 1 times, performing O(ev) work, but for low-diameter graphs, implementations typically converge with fewer iterations.
---
id=41
title=Better approximation of betweenness centrality
author=R. Geisberger
journal=ALENEX
year=2008
tags=Betweeness centrality, approximation, contraction hierarchy
star=***
problem=
interest=
hardness=
idea=
future=
comment=
other=
---
